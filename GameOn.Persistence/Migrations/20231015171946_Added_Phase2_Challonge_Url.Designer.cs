// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using GameOn.Persistence;

#nullable disable

namespace GameOn.Persistence.Migrations
{
    [DbContext(typeof(GameOnContext))]
    [Migration("20231015171946_Added_Phase2_Challonge_Url")]
    partial class Added_Phase2_Challonge_Url
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("GameOn.Domain.FifaGamePlayed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsPlayed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_played");

                    b.Property<int?>("Phase")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phase");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("platform_id");

                    b.Property<DateTime>("PlayedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2023, 10, 15, 19, 19, 46, 740, DateTimeKind.Local).AddTicks(7720))
                        .HasColumnName("played_on");

                    b.Property<int>("SeasonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("season_id");

                    b.Property<int?>("Team1Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("team_1_id");

                    b.Property<int?>("Team2Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("team_2_id");

                    b.Property<string>("TeamCode1")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("team_code_1");

                    b.Property<string>("TeamCode2")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("team_code_2");

                    b.Property<int>("TeamScore1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("team_score_1");

                    b.Property<int>("TeamScore2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("team_score_2");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PlatformId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("Team1Id");

                    b.HasIndex("Team2Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("FifaGamePlayed", (string)null);
                });

            modelBuilder.Entity("GameOn.Domain.FifaTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("FifaTeam", (string)null);
                });

            modelBuilder.Entity("GameOn.Domain.FifaTeamPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("FifaGameId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fifa_game_id");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("player_id");

                    b.Property<int>("Team")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("team");

                    b.HasKey("Id");

                    b.HasIndex("FifaGameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FifaTeamPlayer", (string)null);
                });

            modelBuilder.Entity("GameOn.Domain.Highlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT")
                        .HasColumnName("external_url");

                    b.Property<int>("FifaGameId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fifa_game_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FifaGameId");

                    b.ToTable("Highlight", (string)null);
                });

            modelBuilder.Entity("GameOn.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Platform", (string)null);
                });

            modelBuilder.Entity("GameOn.Domain.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2023, 10, 15, 17, 19, 46, 740, DateTimeKind.Utc).AddTicks(7140))
                        .HasColumnName("created_on");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("KeycloakId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("keycloak_id");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("nickname");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("profile_picture_url");

                    b.HasKey("Id");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("GameOn.Domain.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Season", (string)null);
                });

            modelBuilder.Entity("GameOn.Domain.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Phase2ChallongeUrl")
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT")
                        .HasColumnName("phase2_challonge_url");

                    b.Property<DateTime>("PlannedFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2023, 10, 15, 17, 19, 46, 740, DateTimeKind.Utc).AddTicks(4580))
                        .HasColumnName("planned_from");

                    b.Property<DateTime>("PlannedTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2023, 10, 16, 17, 19, 46, 740, DateTimeKind.Utc).AddTicks(4660))
                        .HasColumnName("planned_to");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("Tournament", (string)null);
                });

            modelBuilder.Entity("GameOn.Domain.TournamentPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("FifaTeamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fifa_team_id");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2023, 10, 15, 17, 19, 46, 740, DateTimeKind.Utc).AddTicks(4990))
                        .HasColumnName("joined_at");

                    b.Property<int?>("Phase1Score")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phase_1_score");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("player_id");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex("FifaTeamId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentPlayer", (string)null);
                });

            modelBuilder.Entity("GameOn.Domain.FifaGamePlayed", b =>
                {
                    b.HasOne("GameOn.Domain.Player", "CreatedBy")
                        .WithMany("FifaGameCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FifaGamePlayed_Player_Created_By");

                    b.HasOne("GameOn.Domain.Platform", "Platform")
                        .WithMany("GamesPlayed")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FifaGamePlayed_Platform");

                    b.HasOne("GameOn.Domain.Season", "Season")
                        .WithMany("FifaGamePlayed")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FifaGamePlayed_Season");

                    b.HasOne("GameOn.Domain.FifaTeam", "Team1")
                        .WithMany("GamesPlayedTeam1")
                        .HasForeignKey("Team1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_FifaGamePlayed_FifaTeam1");

                    b.HasOne("GameOn.Domain.FifaTeam", "Team2")
                        .WithMany("GamesPlayedTeam2")
                        .HasForeignKey("Team2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_FifaGamePlayed_FifaTeam2");

                    b.HasOne("GameOn.Domain.Tournament", "Tournament")
                        .WithMany("Games")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_FifaGamePlayed_Tournament");

                    b.Navigation("CreatedBy");

                    b.Navigation("Platform");

                    b.Navigation("Season");

                    b.Navigation("Team1");

                    b.Navigation("Team2");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("GameOn.Domain.FifaTeamPlayer", b =>
                {
                    b.HasOne("GameOn.Domain.FifaGamePlayed", "FifaGamePlayed")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("FifaGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FifaTeamPlayer_FifaGamePlayed");

                    b.HasOne("GameOn.Domain.Player", "Player")
                        .WithMany("FifaTeamPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FifaTeamPlayer_Player");

                    b.Navigation("FifaGamePlayed");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameOn.Domain.Highlight", b =>
                {
                    b.HasOne("GameOn.Domain.Player", "CreatedBy")
                        .WithMany("Highlights")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Highlight_Player_Created_By");

                    b.HasOne("GameOn.Domain.FifaGamePlayed", "FifaGame")
                        .WithMany("Highlights")
                        .HasForeignKey("FifaGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FifaGame_Highlight");

                    b.Navigation("CreatedBy");

                    b.Navigation("FifaGame");
                });

            modelBuilder.Entity("GameOn.Domain.TournamentPlayer", b =>
                {
                    b.HasOne("GameOn.Domain.FifaTeam", "FifaTeam")
                        .WithMany("TournamentPlayers")
                        .HasForeignKey("FifaTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TournamentPlayer_FifaTeam");

                    b.HasOne("GameOn.Domain.Player", "Player")
                        .WithMany("TournamentPlayed")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TournamentPlayer_Player");

                    b.HasOne("GameOn.Domain.Tournament", "Tournament")
                        .WithMany("Players")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TournamentPlayer_Tournament");

                    b.Navigation("FifaTeam");

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("GameOn.Domain.FifaGamePlayed", b =>
                {
                    b.Navigation("Highlights");

                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("GameOn.Domain.FifaTeam", b =>
                {
                    b.Navigation("GamesPlayedTeam1");

                    b.Navigation("GamesPlayedTeam2");

                    b.Navigation("TournamentPlayers");
                });

            modelBuilder.Entity("GameOn.Domain.Platform", b =>
                {
                    b.Navigation("GamesPlayed");
                });

            modelBuilder.Entity("GameOn.Domain.Player", b =>
                {
                    b.Navigation("FifaGameCreated");

                    b.Navigation("FifaTeamPlayers");

                    b.Navigation("Highlights");

                    b.Navigation("TournamentPlayed");
                });

            modelBuilder.Entity("GameOn.Domain.Season", b =>
                {
                    b.Navigation("FifaGamePlayed");
                });

            modelBuilder.Entity("GameOn.Domain.Tournament", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
