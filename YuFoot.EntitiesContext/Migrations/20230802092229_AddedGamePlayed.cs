// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace YuFoot.EntitiesContext.Migrations
{
    /// <inheritdoc />
    public partial class AddedGamePlayed : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<DateTime>(
                name: "created_on",
                table: "Player",
                type: "TEXT",
                nullable: false,
                defaultValue: new DateTime(2023, 8, 2, 11, 22, 29, 926, DateTimeKind.Local).AddTicks(2040),
                oldClrType: typeof(DateTime),
                oldType: "TEXT",
                oldDefaultValue: new DateTime(2023, 8, 1, 23, 45, 35, 111, DateTimeKind.Local).AddTicks(9140));

            migrationBuilder.CreateTable(
                name: "GamePlayed",
                columns: table => new
                {
                    id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    played_on = table.Column<DateTime>(type: "TEXT", nullable: false, defaultValue: new DateTime(2023, 8, 2, 11, 22, 29, 926, DateTimeKind.Local).AddTicks(1600)),
                    team_code_1 = table.Column<string>(type: "TEXT", maxLength: 10, nullable: true),
                    team_code_2 = table.Column<string>(type: "TEXT", maxLength: 10, nullable: true),
                    team_score_1 = table.Column<int>(type: "INTEGER", maxLength: 100, nullable: false),
                    team_score_2 = table.Column<int>(type: "INTEGER", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GamePlayed", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "TeamPlayer",
                columns: table => new
                {
                    id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    player_id = table.Column<int>(type: "INTEGER", nullable: false),
                    GamePlayedId = table.Column<int>(type: "INTEGER", nullable: false),
                    team = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TeamPlayer", x => x.id);
                    table.ForeignKey(
                        name: "FK_GamePlayed_TeamPlayer",
                        column: x => x.GamePlayedId,
                        principalTable: "GamePlayed",
                        principalColumn: "id");
                    table.ForeignKey(
                        name: "FK_Player_TeamPlayer",
                        column: x => x.player_id,
                        principalTable: "Player",
                        principalColumn: "id");
                });

            migrationBuilder.CreateIndex(
                name: "IX_TeamPlayer_GamePlayedId",
                table: "TeamPlayer",
                column: "GamePlayedId");

            migrationBuilder.CreateIndex(
                name: "IX_TeamPlayer_player_id",
                table: "TeamPlayer",
                column: "player_id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "TeamPlayer");

            migrationBuilder.DropTable(
                name: "GamePlayed");

            migrationBuilder.AlterColumn<DateTime>(
                name: "created_on",
                table: "Player",
                type: "TEXT",
                nullable: false,
                defaultValue: new DateTime(2023, 8, 1, 23, 45, 35, 111, DateTimeKind.Local).AddTicks(9140),
                oldClrType: typeof(DateTime),
                oldType: "TEXT",
                oldDefaultValue: new DateTime(2023, 8, 2, 11, 22, 29, 926, DateTimeKind.Local).AddTicks(2040));
        }
    }
}
